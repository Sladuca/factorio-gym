#!/usr/bin/env python3
"""
Port availability scanner for multi-instance setup
"""

import socket
import sys
from typing import List, Dict


def check_port_available(host: str, port: int, timeout: float = 1.0) -> bool:
    """Check if a port is available (not in use)"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.settimeout(timeout)
            result = sock.connect_ex((host, port))
            return result != 0  # 0 means connection successful (port in use)
    except Exception:
        return True  # Assume available if we can't test


def scan_port_range(host: str, start_port: int, end_port: int) -> Dict[int, bool]:
    """Scan a range of ports and return availability"""
    results = {}
    print(f"Scanning ports {start_port}-{end_port} on {host}...")
    
    for port in range(start_port, end_port + 1):
        available = check_port_available(host, port)
        results[port] = available
        status = "AVAILABLE" if available else "IN USE"
        print(f"  Port {port}: {status}")
        
    return results


def find_available_port_pairs(host: str, start_port: int, count: int) -> List[tuple]:
    """Find consecutive port pairs for game+RCON"""
    pairs = []
    current_port = start_port
    
    while len(pairs) < count and current_port < 65535:
        # Check if both game port and RCON port (game+1) are available
        game_port = current_port
        rcon_port = current_port + 1
        
        if (check_port_available(host, game_port) and 
            check_port_available(host, rcon_port)):
            pairs.append((game_port, rcon_port))
            current_port += 10  # Space out instances
        else:
            current_port += 1
            
    return pairs


def generate_instance_config(pairs: List[tuple]) -> str:
    """Generate configuration for multi-instance setup"""
    config = ["# Multi-instance port configuration"]
    config.append("# Generated by port_scanner.py")
    config.append("")
    
    for i, (game_port, rcon_port) in enumerate(pairs, 1):
        config.append(f"# Instance {i}")
        config.append(f"INSTANCE_{i}_GAME_PORT={game_port}")
        config.append(f"INSTANCE_{i}_RCON_PORT={rcon_port}")
        config.append("")
        
    return "\n".join(config)


def main():
    import argparse
    
    parser = argparse.ArgumentParser(description="Port scanner for Factorio multi-instance")
    parser.add_argument("--host", default="localhost", help="Host to scan")
    parser.add_argument("--start-port", type=int, default=34197, 
                       help="Starting port to scan")
    parser.add_argument("--end-port", type=int, default=34250,
                       help="Ending port to scan")
    parser.add_argument("--instances", type=int, default=3,
                       help="Number of instances to plan for")
    parser.add_argument("--scan-only", action="store_true",
                       help="Only scan ports, don't suggest configuration")
    
    args = parser.parse_args()
    
    if args.scan_only:
        # Just scan the range
        results = scan_port_range(args.host, args.start_port, args.end_port)
        
        available_count = sum(1 for available in results.values() if available)
        total_count = len(results)
        
        print(f"\nSummary: {available_count}/{total_count} ports available")
        
    else:
        # Find port pairs for instances
        print(f"Finding {args.instances} port pairs starting from {args.start_port}")
        pairs = find_available_port_pairs(args.host, args.start_port, args.instances)
        
        if len(pairs) < args.instances:
            print(f"Warning: Only found {len(pairs)} available port pairs, needed {args.instances}")
            
        print(f"\nFound {len(pairs)} available port pairs:")
        for i, (game_port, rcon_port) in enumerate(pairs, 1):
            print(f"  Instance {i}: Game={game_port}, RCON={rcon_port}")
            
        # Generate configuration
        if pairs:
            config = generate_instance_config(pairs)
            print("\nGenerated configuration:")
            print("=" * 50)
            print(config)
            
            # Save to file
            config_file = "instances/port_config.env"
            import os
            os.makedirs("instances", exist_ok=True)
            
            with open(config_file, "w") as f:
                f.write(config)
            print(f"\nConfiguration saved to {config_file}")


if __name__ == "__main__":
    main()
